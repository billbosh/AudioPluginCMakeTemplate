# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
    tags:
      - '*'
  pull_request:
    branches: [ "main"]
    tags:
      - '*'

env:
  PLUGIN_NAME: AudioPluginCMakeTemplate
  VERSION: 0.0.1
  COMPANY: billbosh

jobs:
  Build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest clang compiler toolchain on the default runner image, default generator>
      # 2. <MacOS, Release, latest GCC compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: gcc
        exclude:
          - os: windows-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: clang

    steps:
    # Setup MSVC toolchain and developer command prompt (Windows)
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{ steps.strings.outputs.build-output-dir }} -G Ninja -DJUCE_BUILD_EXAMPLES=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Make packaging dir
      shell: bash
      run: mkdir packaging

    - name: Create macos pkg installers
      if: runner.os == 'macOS'
      shell: bash
      run: |
        pkgbuild --component "build/${{ env.PLUGIN_NAME }}_artefacts/Release/VST3/${{ env.PLUGIN_NAME }}.vst3" --install-location Library/Caches packaging/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.pkg
        pkgbuild --component "build/${{ env.PLUGIN_NAME }}_artefacts/Release/AU/${{ env.PLUGIN_NAME }}.component" --install-location Library/Caches packaging/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.pkg
        
    - name: Create installer.iss
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo '
        [Setup]
        AppName=${{ env.PLUGIN_NAME }}
        AppVersion=${{ env.VERSION }}
        AppPublisher=${{ env.COMPANY }}
        DefaultDirName="{commoncf64}\VST3\${{ env.PLUGIN_NAME }}.vst3"
        Compression=lzma2
        SolidCompression=yes
        Uninstallable=no
        OutputBaseFilename=${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-Windows
        OutputDir=.
        
        [Files]
        Source: "build\${{ env.PLUGIN_NAME }}_artefacts\Release\VST3\${{ env.PLUGIN_NAME }}.vst3\Contents\x86_64-win\${{ env.PLUGIN_NAME }}.vst3"; DestDir: "{commoncf64}\VST3\";
        ' > installer.iss
        
    - name: Package with installer.iss
      if: runner.os == 'Windows'
      shell: bash
      run: iscc "installer.iss"

    - name: Move .exe installer to packaging dir
      if: runner.os == 'Windows'
      shell: bash
      run: |
        mv "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-Windows.exe" "packaging"

    - name: Upload CHANGELOG.md to artifacts (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: CHANGELOG
        path: CHANGELOG.md
      
    - name: Upload VST3 pkg installer to artifacts (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS
        path: packaging/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.pkg

    - name: Upload AU pkg installer to artifacts (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS
        path: packaging/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.pkg

    - name: Upload VST3 pkg installer to artifacts (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-Windows
        path: packaging/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-Windows.exe

  MacInstallScript:
    name: MacInstallScript
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Create Install Packages
        shell: bash
        run: mkdir "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS" "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS"

      - name: Download VST3 pkg artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS
          path: mkdir "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS"

      - name: Download AU pkg artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS
          path: "mkdir ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS"

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create VST3 install script
        shell: bash
        run: |
          echo '
          #!/bin/bsh

          open "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.pkg"
          if [ ! -d ~/Library/Audio/Plug-Ins/Components ]; then
            mkdir ~/Library/Audio/Plug-Ins/Components;
          fi

          while true; do
            echo "Library/Caches checked" 
            if [ -d "/Library/Caches/${{ env.PLUGIN_NAME }}.component" ]; then
              echo "Plugin file found in caches"
              break
            fi
            sleep 2
          done

          cd /Library/Caches

          sudo mv ${{ env.PLUGIN_NAME }}.component ~/Library/Audio/Plug-Ins/Components
          ' > "{{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS/install-script.sh"

      - name: Create AU install script
        shell: bash
        run: |
          echo '
          #!/bin/bsh

          open "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.pkg"
          if [ ! -d ~/Library/Audio/Plug-Ins/Components ]; then
            mkdir ~/Library/Audio/Plug-Ins/Components;
          fi

          while true; do
            echo "Library/Caches checked" 
            if [ -d "/Library/Caches/${{ env.PLUGIN_NAME }}.component" ]; then
              echo "Plugin file found in caches"
              break
            fi
            sleep 2
          done

          cd /Library/Caches

          sudo mv ${{ env.PLUGIN_NAME }}.component ~/Library/Audio/Plug-Ins/Components
          ' > "{{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS/install-script.sh"

      - name: Archive VST3 installer
        shell: bash
        run: tar -czf "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.tar.gz" "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS"

      - name: Archive AU installer
        shell: bash
        run: tar -czf "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.tar.gz" "${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS"

      - name: Upload VST3 .tar.gz installer to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.tar.gz
          path: packaging/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.tar.gz

      - name: Upload AU .tar.gz installer to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.tar.gz
          path: packaging/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.tar.gz

  Release:
    name: Release
    needs: MacInstallScript
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: false
          release_name: ${{ env.PLUGIN_NAME }}
          tag_name: ${{ env.VERSION }}
          body_path: CHANGELOG/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
  
      - name: Upload VST3 .tar.gz installer to release (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.tar.gz
          asset_name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-MacOS.tar.gz
          asset_content_type: application/octet-stream
  
      - name: Upload AU .tar.gz installer to release (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.tar.gz
          asset_name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-AU-Installer-MacOS.tar.gz
          asset_content_type: application/octet-stream
  
      - name: Upload VST3 exe installer to release (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-Windows/${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-Windows.exe
          asset_name: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}-VST3-Installer-Windows.exe
          asset_content_type: application/octet-stream
