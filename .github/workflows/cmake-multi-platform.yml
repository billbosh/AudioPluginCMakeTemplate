# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PLUGIN_NAME: AudioPluginCMakeTemplate
  VERSION: 0.0.1
  COMPANY: billbosh


jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: gcc
        exclude:
          - os: windows-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: clang

    steps:
    # Setup MSVC toolchain and developer command prompt (Windows)
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{ steps.strings.outputs.build-output-dir }} -G Ninja -DJUCE_BUILD_EXAMPLES=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Make packaging dir
      shell: bash
      run: mkdir packaging

    - name: Create macos pkg installers
      if: runner.os == 'macOS'
      shell: bash
      run: |
        pkgbuild --component "build/${{ env.PLUGIN_NAME }}_artefacts/Release/VST3/${{ env.PLUGIN_NAME }}.vst3" --install-location "/Library/Audio/Plug-Ins/VST3" packaging/${{ env.PLUGIN_NAME }}-VST3-Installer-MacOS.pkg
        pkgbuild --component "build/${{ env.PLUGIN_NAME }}_artefacts/Release/AU/${{ env.PLUGIN_NAME }}.component" --install-location "/Library/Audio/Plug-Ins/AU" packaging/${{ env.PLUGIN_NAME }}-AU-Installer-MacOS.pkg
        

    - name: Create installer.iss
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo '
        [Setup]
        AppName=${{ env.PLUGIN_NAME }}
        AppVersion=${{ env.VERSION }}
        AppPublisher=${{ env.COMPANY }}
        DefaultDirName="{commoncf64}\VST3\${{ env.PLUGIN_NAME }}.vst3"
        Compression=lzma2
        SolidCompression=yes
        OutputBaseFilename=${{ env.PLUGIN_NAME }}-VST3-Installer-Windows
        OutputDir=.
        
        [Files]
        Source: "build\${{ env.PLUGIN_NAME }}_artefacts\Release\VST3\${{ env.PLUGIN_NAME }}.vst3\Contents\x86_64-win\${{ env.PLUGIN_NAME }}.vst3"; DestDir: "{commoncf64}\VST3\${{ env.PLUGIN_NAME }}.vst3\";
        ' > installer.iss

    - name: View packaging dir
      shell: bash
      run: |
        echo "$(<installer.iss )"
        search_dir=packaging
        for entry in "$search_dir"/*
        do
          echo "$entry"
        done

    - name: Package with installer.iss
      if: runner.os == 'Windows'
      shell: bash
      run: iscc "installer.iss"

    - name: Move .exe installer to packaging dir
      if: runner.os == 'Windows'
      shell: bash
      run: |
        mv "Output/${{ env.PLUGIN_NAME }}-VST3-Installer-Windows.exe" "packaging"

    - name: View packaging dir
      shell: bash
      run: |
        search_dir=packaging
        for entry in "$search_dir"/*
        do
          echo "$entry"
        done
