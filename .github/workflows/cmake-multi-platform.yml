# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: gcc
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: gcc
        exclude:
          - os: windows-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{ steps.strings.outputs.build-output-dir }} -DJUCE_BUILD_EXAMPLES=OFF -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
      
    - name: Create DMG, Notarize and Staple (macOS)
      if: ${{ matrix.name == 'macOS' }}
      run: |
        # workaround for https://github.com/LinusU/node-appdmg/issues/234
        python3 -m pip install setuptools --break-system-packages
        npm install -g appdmg
        mkdir -p packaging/dmg
  
        # Create directories for the dmg symlinks
        sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/Components && sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/VST3
        ln -s /Library/Audio/Plug-Ins/Components "packaging/dmg/Your Mac's Component folder"
        ln -s /Library/Audio/Plug-Ins/VST3 "packaging/dmg/Your Mac's VST3 folder"
        mv "${{ env.VST3_PATH }}" packaging/dmg
        mv "${{ env.AU_PATH }}" packaging/dmg
  
        # Run appdmg to create the .dmg
        cd packaging && appdmg dmg.json "${{ env.ARTIFACT_NAME}}.dmg"

    # - name: Read in .env from CMake # see GitHubENV.cmake
    #   run: |
    #     cat .env # show us the config
    #     cat .env >> $GITHUB_ENV # pull in our PRODUCT_NAME, etc

    # - name: Set additional env vars for next steps
    #   run: |
    #     echo ARTIFACTS_PATH="${{ steps.strings.outputs.build-output-dir }}/${{ env.PROJECT_NAME }}_artefacts/"
    #     echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
    #     echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
    #     echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
    #     echo "AUV3_PATH=$ARTIFACTS_PATH/AUv3/${{ env.PRODUCT_NAME }}.appex" >> $GITHUB_ENV
    #     echo "STANDALONE_PATH=$ARTIFACTS_PATH/Standalone/${{ env.PRODUCT_NAME }}.app" >> $GITHUB_ENV
    #     echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

    
    # - name: Create Installers
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     echo '
    #     #define Version Trim(FileRead(FileOpen("..\VERSION")))
    #     #define ProjectName GetEnv('PROJECT_NAME')
    #     #define ProductName GetEnv('PRODUCT_NAME')
    #     #define Publisher GetEnv('COMPANY_NAME')
    #     #define Year GetDateTimeString("yyyy","","")
        
    #     [Setup]
    #     AppName={#ProductName}
    #     AppVersion={#Version}
    #     AppPublisher={#Publisher}
    #     OutputBaseFilename={#ProductName}-{#Version}-Windows
    #     DefaultDirName="{commoncf64}\VST3\{#ProductName}.vst3"       

    #     [Files]
    #     Source: "build\${Project_NAME}_artefacts\VST3\${Project_NAME}.vst3; DestDir: "{app}"; Flags; ignoreversion
    #     ' > installer.iss
        
    # - name: Inno Setup Action
    #   if: matrix.os == 'windows-latest'
    #   uses: Minionguyjpro/Inno-Setup-Action@v1.2.5
    #   with:
    #       path: installer.iss
    #       options: /O+
            
